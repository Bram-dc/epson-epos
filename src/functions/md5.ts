
const s = [7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]
const k = [3614090360, 3905402710, 606105819, 3250441966, 4118548399, 1200080426, 2821735955, 4249261313, 1770035416, 2336552879, 4294925233, 2304563134, 1804603682, 4254626195, 2792965006, 1236535329, 4129170786, 3225465664, 643717713, 3921069994, 3593408605, 38016083, 3634488961, 3889429448, 568446438, 3275163606, 4107603335, 1163531501, 2850285829, 4243563512, 1735328473, 2368359562, 4294588738, 2272392833, 1839030562, 4259657740, 2763975236, 1272893353, 4139469664, 3200236656, 681279174, 3936430074, 3572445317, 76029189, 3654602809, 3873151461, 530742520, 3299628645, 4096336452, 1126891415, 2878612391, 4237533241, 1700485571, 2399980690, 4293915773, 2240044497, 1873313359, 4264355552, 2734768916, 1309151649, 4149444226, 3174756917, 718787259, 3951481745]
const p = '\x80' + new Array(64).join('\0')

const i2s = (i: number) => String.fromCharCode(i & 255, i >> 8 & 255, i >> 16 & 255, i >> 24 & 255)

const s2i = (s: string, j: number) => (s.charCodeAt(j++) & 255) | (s.charCodeAt(j++) & 255) << 8 | (s.charCodeAt(j++) & 255) << 16 | (s.charCodeAt(j++)) << 24

const bin = (data: string) => {

    let a0 = 1732584193
    let b0 = 4023233417
    let c0 = 2562383102
    let d0 = 271733878

    let a, b, c, d, f, g, r, j

    const m = new Array(16)

    data += p.slice(0, 64 - (data.length + 8) % 64) + i2s(data.length << 3) + i2s(0)

    for (let i = 0; i < data.length; i += 64) {

        for (j = 0; j < 16; j++) {
            m[j] = s2i(data, i + (j << 2))
        }

        a = a0
        b = b0
        c = c0
        d = d0

        for (j = 0; j < 64; j++) {

            if (j < 16) {

                f = (b & c) | (~b & d)
                g = j

            } else {

                if (j < 32) {

                    f = (d & b) | (~d & c)
                    g = j * 5 + 1 & 15

                } else {

                    if (j < 48) {

                        f = b ^ c ^ d
                        g = j * 3 + 5 & 15

                    } else {

                        f = c ^ (b | ~d)
                        g = j * 7 & 15

                    }

                }

            }

            r = a + f + k[j] + m[g] | 0
            r = (r << s[j]) | (r >>> 32 - s[j])
            a = d
            d = c
            c = b
            b = r + b | 0

        }

        a0 = a0 + a | 0
        b0 = b0 + b | 0
        c0 = c0 + c | 0
        d0 = d0 + d | 0

    }

    return i2s(a0) + i2s(b0) + i2s(c0) + i2s(d0)

}

const md5 = { bin }

export default md5